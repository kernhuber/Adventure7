from Place import Place
from Way import Way
from typing import Dict, List
from PlayerState import PlayerState
from GameObject import GameObject
from typing import Any

#
# Maintains the state from the game perspective. There are player states as well
#

from typing import Callable

def make_obstruction_check(locked: bool) -> Callable[['GameState'], bool]:
    return lambda state: locked

class GameState:
    def __init__(self, room_definitions, way_definitions, object_definitions,player_names):
        self.rooms: Dict[str, Place] = self._init_rooms(room_definitions)
        self.ways: List[Way] = self._init_ways(way_definitions)
        self.objects: List[GameObject] = self._init_objects(object_definitions)
        self.players: List[PlayerState] = self._init_players(player_names)
        self.time = 0
        self.debug_mode = False

    def _init_rooms(self, defs) -> Dict[str, Place]:
        rooms = {}
        for name, data in defs.items():
            dst = []
            src = data.get("gegenstaende", [])
            for obj_name in src:
                matching = [o for o in self.objects if o.name == obj_name]
                if matching:
                    dst.append(matching[0])
            room = Place(
                name=name,
                beschreibung=data["beschreibung"],
                room_prompt=data["room_prompt"],
                room_objects=dst
            )
            rooms[name] = room
        return rooms

    def _init_ways(self, ways_data: List[Dict[str, Any]]) -> List[Way]:
        ways: List[Way] = []
        for wd in ways_data:
            source_room = self.rooms[wd["startraum"]]
            dest_room = self.rooms[wd["zielraum"]]
            way = Way(
                source=source_room,
                destination=dest_room,
                text_direction=wd["richtung"],
                obstruction_check=make_obstruction_check(wd.get("verschlossen", False)),
                description=wd.get("beschreibung", "")
            )
            ways.append(way)
            source_room.wege.append(way)
        return ways

    def _init_players(self, names) -> List[PlayerState]:
        return [PlayerState(location=self.rooms["halle"]) for name in names]

    def _init_objects(self, objects_data: List[Dict[str, Any]]) -> List[GameObject]:
        objects: List[GameObject] = []
        for od in objects_data:
            obj = GameObject(name=od["name"], examine=od["beschreibung"])
            raum_name = od.get("raum")
            if raum_name and raum_name in self.rooms:
                self.rooms[raum_name].room_objects.append(obj)
            objects.append(obj)
        return objects

    @classmethod
    def from_definitions(cls, room_defs, way_defs, object_defs, player_names):
        # Factory-Methode zur Initialisierung eines vollständigen GameState
        instance = cls.__new__(cls)

        instance.objects = instance._init_objects(object_defs)
        instance.rooms = instance._init_rooms(room_defs)
        instance.ways = instance._init_ways(way_defs)

        instance.players = instance._init_players(player_names)

        instance.time = 0
        instance.debug_mode = False
        return instance


def init_game_old():
    # Beispiel-Setup (Platzhalter): In der Praxis könnten die Definitionen aus JSON geladen werden
    room_defs = {
        "halle": {
            "beschreibung": "Eine große Eingangshalle mit einem Kronleuchter.",
            "room_prompt": "Die Halle wirkt kühl und leer.",
            "gegenstaende": []
        },
        "bibliothek": {
            "beschreibung": "Regale voller Bücher, ein geheimnisvoller Geruch liegt in der Luft.",
            "room_prompt": "Die Bibliothek lädt zum Stöbern ein.",
            "gegenstaende": []
        }
    }

    way_defs = [
        {
            "richtung": "norden",
            "startraum": "halle",
            "zielraum": "bibliothek",
            "verschlossen": False,
            "beschreibung": "Ein hölzerner Torbogen führt in die Bibliothek."
        },
        {
            "richtung": "süden",
            "startraum": "bibliothek",
            "zielraum": "halle",
            "verschlossen": False,
            "beschreibung": "Die Tür zurück in die Halle steht offen."
        }
    ]

    object_defs = [
        {
            "name": "buch",
            "beschreibung": "Ein altes, ledergebundenes Buch mit verblasstem Titel.",
            "location": "bibliothek"
        }
    ]

    player_names = ["Spieler1"]

    return GameState.from_definitions(room_defs, way_defs, object_defs, player_names)

def init_game():
    room_defs = {
        "halle": {
            "beschreibung": "Du wachst in einem kargen Raum ohne Fenster auf. Der Raum hat Sandsteinmauern. Es liegen einige Gegenstände im Raum herum.",
            "room_prompt": """
                * Du bist ein begabter Erzähler, der gerne geheimnisvolle Geschichten erzählt. Halte dich an 
                  die vorgegebenen Fakten. 
                * Wenn der Spieler sich umsieht:
                  - Beschreibe, in welcher Himmelsrichtung Türen sind, und ob 
                    diese verschlossen sind, 
                    und halte dich an die Beschreibung der Türen. Erwähne dabei im Text die raumID nicht, 
                    diese wird nur bei den tool-Calls verwendet, die weiter unten kommen. 
                 -  Erwähne immer alle Gegenstände im Raum, aber erfinde keine neuen.
                * Wenn der Spieler um Hilfe bittet, unterscheide zwei Fälle:
                  1) Wenn ein Schlüssel bei den Gegenständen im Raum, oder im Inventory des Spielers ist, weise ihn darauf 
                     hin, dass dieser doch in die Tür im Norden passen könnte. Erzähle dies passend.
                  2) Wenn KEIN Schlüssel im Raum oder im Inventory des Spielers ist, weise den Spieler daruf hin, dass das 
                     Kissen doch recht gemütlich aussieht.
            """,
            "gegenstaende": ["Kissen", "Luftpumpe", "Schraubstock", "Schuhloeffel", "Schluessel", "Tuer_Norden", "Tuer_Westen"]
        },
        "bibliothek": {
            "beschreibung": "Eine staubige Bibliothek mit hohen Regalen voller Bücher.",
            "room_prompt": "Hier riecht es nach altem Papier. Erwähne die Vielzahl an Büchern.",
            "gegenstaende": ["buch"]
        },
        "durchgang": {
            "beschreibung": "Ein schmuckloser Durchgang.",
            "room_prompt": "Es ist viel Staub hier. Man könnte hier mal wieder putzen. Ansonsten ist es recht langweilig hier.",
            "gegenstaende": []
        },
        "finalraum": {
            "beschreibung": "Dieser Raum ist eigentlich auch recht öde. Da hätten sie sich in diesem Game echt mal mehr ausdenken können!",
            "room_prompt": "Der Raum ist aus Beton und völlig schmucklos. An der Wand hängt ein Zahlenschloss.",
            "gegenstaende": ["zahlenschloss"]
        },
        "ende": {
            "beschreibung": "Eine wunderschöne Wiese mit Blumen. Die Sonne scheint. Die Luft duftet nach Sommer. Hinter Dir ein Betonklotz mit der Stahltür, durch die du gekommen bist. Die Tür ist nun verschlossen. Du hast das Spiel gewonnen.",
            "room_prompt": "Der Spieler hat das Spiel gewonnen. Beschreibe ihm den Raum (also die Wiese) mit blumigen Worten.",
            "gegenstaende": []
        }
    }

    way_defs = [
        # Halle <-> Bibliothek
        {"richtung": "norden", "startraum": "halle", "zielraum": "bibliothek", "verschlossen": True, "beschreibung": ""},
        {"richtung": "sueden", "startraum": "bibliothek", "zielraum": "halle", "verschlossen": False, "beschreibung": "Die Tür zur Halle steht offen."},
        # Halle <-> Durchgang
        {"richtung": "westen", "startraum": "halle", "zielraum": "durchgang", "verschlossen": False, "beschreibung": ""},
        {"richtung": "osten", "startraum": "durchgang", "zielraum": "halle", "verschlossen": False, "beschreibung": "Die Tür zurück zum Eingangsraum steht offen."},
        # Durchgang <-> Finalraum
        {"richtung": "westen", "startraum": "durchgang", "zielraum": "finalraum", "verschlossen": False, "beschreibung": "Die Tür zum nächsten Raum steht offen."},
        {"richtung": "osten", "startraum": "finalraum", "zielraum": "durchgang", "verschlossen": False, "beschreibung": "Hier geht es wieder in den Durchgang."},
        # Finalraum -> Ende
        {"richtung": "westen", "startraum": "finalraum", "zielraum": "ende", "verschlossen": True, "beschreibung": 'Eine Stahltür, darüber ein Schild, auf dem "Exit" steht'}
    ]

    object_defs = [
        {"name": "Kissen", "beschreibung": "Ein weiches, recht zerschlissenes Kissen. Liegt eventuell etwas darunter?", "location": "halle"},
        {"name": "Luftpumpe", "beschreibung": "Eine gewöhnliche Luftpumpe für ein Fahrrad. Muss jemand hier verloren haben", "location": "halle"},
        {"name": "Schraubstock", "beschreibung": "Ein Schraubstock. Merkwürdig – was der hier soll?", "location": "halle"},
        {"name": "Schuhloeffel", "beschreibung": "Ein Schuhlöffel – Zeichen von Anstand und Zivilisation", "location": "halle"},
        {"name": "Schluessel", "beschreibung": "Ein großer Schlüssel aus Eisen. Könnte in ein Türschloss passen", "location": "halle"},
        {"name": "Tuer_Norden", "beschreibung": "Ein massives Tor aus dunklem Holz. Es ist verschlossen.", "location": "halle"},
        {"name": "Tuer_Westen", "beschreibung": "Eine einfache Tür aus Holz. Sie steht offen.", "location": "halle"},
        {"name": "buch", "beschreibung": "Ein altes Buch voller Geheimnisse! Auf der ersten Seite steht eine Zahl: 8513", "location": "bibliothek"},
        {"name": "zahlenschloss", "beschreibung": "Sieht aus, als könntest du hier vier Zahlen eingeben. Ob das wohl eine Tür öffnet?", "location": "finalraum"}
    ]

    player_names = ["Spieler1"]

    return GameState.from_definitions(room_defs, way_defs, object_defs, player_names)

